/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}h1{font-size:2em;margin:0.67em 0}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type="checkbox"],[type="radio"]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}*{margin:0;padding:0;font:inherit}*,*:before,*:after{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:focus,*:active{outline:none}body,html{font-family:'Tahoma', sans-serif;cursor:default;width:100%;height:100%;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}html{font-size:14px}ul,ol,li{list-style:none}img{max-width:100%;max-height:100%;border:none}a{text-decoration:none;cursor:pointer;background:transparent;color:inherit}.clearfix:after{content:'';display:block;clear:both}.hidden{position:absolute;width:1px;height:1px;margin:-1px;border:0;padding:0;white-space:nowrap;-webkit-clip-path:inset(100%);clip-path:inset(100%);clip:rect(0 0 0 0);overflow:hidden}.wrapper{color:#fff;background-color:#fff;width:100%;height:100%;overflow:hidden}.container{max-width:1024px;width:100%;height:100%;margin:0 auto;position:relative;-webkit-box-shadow:0 0 18px 3px rgba(0,0,0,0.57);box-shadow:0 0 18px 3px rgba(0,0,0,0.57);background-color:#fff;padding-top:7.5rem}.menu{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:#54add8;padding:0 6.14286rem}.menu .menu__list{-webkit-box-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around}.menu .menu__item{padding:1rem 0;display:inline-block;font-size:13px;font-weight:700;text-transform:uppercase}.menu .menu__login{position:relative;padding-left:1.5rem;margin-left:2.5rem;color:#a8d5eb;font-weight:400;text-decoration:underline}.menu .menu__login:hover{color:#fff}.menu .menu__login:hover:before{background-image:url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='14' height='19' viewBox='0 0 14 19' fill='rgb%28255%2C255%2C255%29'%3E %3Cdefs%3E %3Cpath id='a' d='M1320.14 125.92c1.66 0 3-1.65 3-3.7 0-2.03-1.34-3.22-3-3.22s-3 1.19-3 3.23 1.34 3.69 3 3.69zm5.84 5.21c-.3-2.67-2.76-3.63-5.76-3.63h-.17c-3 0-5.46.96-5.75 3.63l-.02.98a9.4 9.4 0 0 0 5.86 1.9c2.26 0 4.25-.7 5.86-1.9l-.02-.98z'/%3E %3C/defs%3E %3Cuse xlink:href='%23a' transform='translate(-1313 -117)'/%3E %3C/svg%3E")}.menu .menu__login:before{content:' ';position:absolute;left:0;top:0;width:15px;height:15px;background-image:url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='14' height='19' viewBox='0 0 14 19' fill='rgb%28168%2C213%2C235%29'%3E %3Cdefs%3E %3Cpath id='a' d='M1320.14 125.92c1.66 0 3-1.65 3-3.7 0-2.03-1.34-3.22-3-3.22s-3 1.19-3 3.23 1.34 3.69 3 3.69zm5.84 5.21c-.3-2.67-2.76-3.63-5.76-3.63h-.17c-3 0-5.46.96-5.75 3.63l-.02.98a9.4 9.4 0 0 0 5.86 1.9c2.26 0 4.25-.7 5.86-1.9l-.02-.98z'/%3E %3C/defs%3E %3Cuse xlink:href='%23a' transform='translate(-1313 -117)'/%3E %3C/svg%3E")}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
